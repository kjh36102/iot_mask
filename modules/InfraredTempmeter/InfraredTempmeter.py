import sys
sys.path.append('./modules/Logger')
from Logger import log

#-------------------------------------

from threading import Thread
import smbus
import time

#CRC table (오류 검출용, 변경하면 안됨)
crc8_table = [         
    0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15,    0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
    0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65,    0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
    0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5,    0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
    0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85,    0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
    0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2,    0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,
    0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2,    0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
    0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32,    0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,
    0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42,    0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,
    0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C,    0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
    0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC,    0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,
    0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C,    0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,
    0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C,    0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
    0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B,    0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,
    0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B,    0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB,    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB,    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3  
]


I2C_ADDR = 0x3a
SENSOR_ADDR = 0x06
OBJECT_ADDR = 0x07

i2c = smbus.SMBus(1)

def read(reg, i2c_addr) -> tuple:
    buf = []

    blocks = i2c.read_i2c_block_data(i2c_addr, reg, 3)

    #0번: low_byte, 1번: high_byte, 2번: PEC코드
    low_byte = blocks[0]
    high_byte = blocks[1]
    PEC = blocks[2]

    #PEC연산을 위한 데이터 저장
    buf.append(i2c_addr << 1)
    buf.append(reg)
    buf.append((i2c_addr << 1) | 0x01)
    buf.append(low_byte)
    buf.append(high_byte)

    #(오류여부, raw 온도데이터) 리턴
    if PEC == calc_pec(buf):
        return (True, (high_byte << 8) | low_byte)
    
    return (False, 0)

#오류 확인
def calc_pec(buf):
    remainder = 0

    for i in range(5):
        data = buf[i] ^ remainder
        remainder = crc8_table[data] ^ (remainder >> 8)
    
    return remainder

#raw temp로부터 실제 temp 계산
def calc_temp(raw_temp):
    return raw_temp * 0.02 - 273.15

#================================================================================

class InfraredTempmeter(Thread):
    def __init__(self, name='no_name', detect_temp=37.5, debug=False, i2c_addr=I2C_ADDR):
        super().__init__(daemon=True)
        #-----------------------------------
        self.name = name
        self.detect_temp = detect_temp
        self.i2c_addr = i2c_addr
        self.stop_flag = False
        self.debug = debug
        #-----------------------------------

        self.current_sensor_temp = 0
        self.current_object_temp = 0

        log(f'({self.name}) 초기화 완료', self)

    def __del__(self):
        log(f'({self.name}) 삭제됨', self)

    def run(self):
        log(f'({self.name}) 체온 측정 시작', self)
        while not self.stop_flag:
            sensor_temp = read(SENSOR_ADDR, self.i2c_addr)
            time.sleep(0.5)
            object_temp = read(OBJECT_ADDR, self.i2c_addr)

            if sensor_temp[0] == True and object_temp[0] == True:
                self.current_sensor_temp = calc_temp(sensor_temp[1])
                self.current_object_temp = calc_temp(object_temp[1])
                log(f'({self.name}) 센서 온도: {self.current_sensor_temp}, 물체 온도: {self.current_object_temp}', self)
            else:
                log(f'({self.name}) 체온 측정 중 오류 발생', self)

    def stop(self):
        self.stop_flag = True
    
    def peek(self) -> tuple:
        '''
        체온 데이터를 리턴하는 함수
        Return
            tuple(센서 온도, 물체 온도)
        '''

        return (self.current_sensor_temp, self.current_object_temp)

    def detect(self):
        temp = self.peek()[1]
        ret = False

        if temp >= self.detect_temp: ret = True
        else: ret = False

        log(f'({self.name}) 감지 결과: {ret}', self)

        return ret